/**
@page	        usage	        MapFilter Usage

@section	mapfilter	        MapFilter

	To use MapFilter there is need to define the <tt>pattern</tt> (and
attach it using constructor or <tt>MapFilter::setPattern()</tt>) describing
expected data. After setting the <tt>query</tt> (using constructor or
<tt>MapFilter::setQuery()</tt>), MapFilter is ready to proceed with input
filtering. Filtering <tt>results</tt> can be had by
<tt>MapFilter::fetchResult()</tt>. This returned object implements the same
set of interfaces as the original Pattern.

@section	pattern			MapFilter Pattern

	A Pattern is an arbitrary implementation of
<tt>MapFilter_PatternInterface</tt>. This pattern is used during the
parsing procedure to do all the work needed to obtain all result types
specified by implemented interfaces.

@section        examples                Examples

@subsection     examplesmapfilter       MapFilter

Creation of <tt>MapFilter</tt> instance using three different ways:
@clip{Unit/MapFilter.test.php,testInvocation}
All three <tt>filters</tt> are identical.

@subsection     examplesuserpattern     User Patterns

Declaration of an simple user pattern to perform whitelist filtering:
@clip{Unit/MapFilter/Pattern.test.php,__MapFilter_WhitelistResultPattern__}
Using of the pattern is very simple:
@clip{Unit/MapFilter/Pattern.test.php,testWhitelistResultPatternFiltering}

@see    MapFilter
@see    MapFilter_PatternInterface
*/
