/**
@page	        usage	        MapFilter Usage

@section	mapfilter	        MapFilter

	To use MapFilter there is need to define the Pattern (and attach it
in constructor or <tt>MapFilter::setPattern()</tt>) describing possible data
relations. After setting the Query (in constructor or
<tt>MapFilter::setQuery()</tt>) MapFilter is ready to proceed with input
filtering. Filtering outputs can be had by
<tt>MapFilter::fetchResult()</tt>. This returned object implements the same
set of interfaces as the original Pattern.

@section	pattern			MapFilter Pattern

	A Pattern is an arbitrary implementation of
<tt>MapFilter_Pattern_Interface</tt>. This pattern is used during the
parsing procedure to do all the work needed to obtain all result types
specified by implemented interfaces. There is the default implementation of
Pattern called TreePattern (<tt>MapFilter_TreePattern</tt>) included in
MapFilter package.

@section        examples                Examples

@subsection     examplesmapfilter       MapFilter

Creation of <tt>MapFilter</tt> instance using three different ways:
@clip{Unit/MapFilter.test.php,testInvocation}
All three <tt>filters</tt> are identical.

@subsection     examplestreepattern     TreePattern

Using <tt>MapFilter_TreePattern</tt>:
@clip{User/TreePattern.test.php,testSimpleOneWhitelist}

@see    MapFilter::getResults()
@see    MapFilter_Pattern_ResultInterface

@subsection     examplesuserpattern     User Pattern

Declaration of an simple user pattern to perform whitelist filtering:
@clip{Unit/MapFilter/Pattern.test.php,__MapFilter_WhitelistResultPattern__}
Using of the pattern is very simple:
@clip{Unit/MapFilter/Pattern.test.php,testWhitelistResultPatternFiltering}

@see    MapFilter
@see    MapFilter_TreePattern
@see    MapFilter_Pattern_Interface
*/
