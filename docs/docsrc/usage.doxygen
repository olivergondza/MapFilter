/**
@page	        usage	        MapFilter Usage

@section	mapfilter	        MapFilter

	To use MapFilter there is need to define the <tt>pattern</tt> (and
attach it using constructor or <tt>MapFilter::setPattern()</tt>) describing
expected data. After setting the <tt>query</tt> (using constructor or
<tt>MapFilter::setQuery()</tt>), MapFilter is ready to proceed with input
filtering. Filtering <tt>results</tt> can be had by
<tt>MapFilter::fetchResult()</tt>. This returned object implements the same
set of interfaces as the original Pattern.

@section	pattern			MapFilter Pattern

	A Pattern is an arbitrary implementation of
<tt>MapFilter_PatternInterface</tt>. This pattern is used during the
parsing procedure to do all the work needed to obtain all result types
specified by implemented interfaces.

@section        examples                Examples

@subsection     examplesmapfilter       MapFilter

Creation of <tt>MapFilter</tt> instance using three different ways:
@clip{Unit/MapFilter.test.php,testInvocation}
All three <tt>filters</tt> are identical.

@subsection     examplesuserpattern     User Patterns

A power of MapFilter is in declaration of user patterns.

Imagine, there is an associative array (command line options or deserialized
configuration file etc.) and we would like to find out whether it conteins
certain keys and what keys are redundant. Our pattern would have two
outcomes: valid and redundant. We declare interface(s) to provide this
results.

@clip{Unit/MapFilter/Pattern.test.php,ArrayKeyWhitelistPatternInterfaces}

Next we create a pattern implementing those interfaces performing a
transformation we need.

@clip{Unit/MapFilter/Pattern.test.php,ArrayKeyWhitelistPattern}

Using of the pattern is straightforward:

@clip{Unit/MapFilter/Pattern.test.php,PatternUsage}

@see    MapFilter
@see    MapFilter_PatternInterface
*/
