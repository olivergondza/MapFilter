/**
@page           treepatternsyntax       TreePattern Syntax

        The pattern is represented by XML file or string with following
sintax.  All allowed elements and its attributes are decared in this
document.

There are some groups declared to facilitate further declaretions.

-       ANY             = <i>Any "Tree element".</i>
-       NONE            = <i>No element an all.</i>
-       ?               = <i>Element is optional.</i>
-       +               = <i>One or more elements can be present.</i>
-       *               = <i>Any number of elements.</i>

        i.e.:
-       ANY*            = <i>Any number of any elements.</i>
-       name?           = <i>There is an optional attribute called "name".</i>
-       pattern+        = <i>One or more pattern elements.</i>

@note
        These groups are @b not used besides this document.

@section        syntaxspecial           Special elements
       

@subsection     syntaxpatterns          Patterns element

        @tag{tag,\<patterns\>}
        @tag{attributes,NONE}
        @tag{children,pattern+}

        The \<patterns\> tag is used as the root element in case there are
more patterns in one file or string.  Thus, if there is just one \<pattern\>
element this element becomes optional.

@code
<patterns>
  <pattern>
    <attr>MyAttr</attr>
  </pattern>
</patterns>
@endcode
is the same as 
@code
<pattern>
  <attr>MyAttr</attr>
</pattern>
@endcode

@subsection     syntaxpattern           Pattern element

        @tag{tag,\<pattern\>}
        @tag{attributes,name?}
        @tag{children,ANY}

        The \<pattern\> tag is used to agregate the pattern tree itself. In
case there is just one pattern in the file this tag become optional.

@code
<pattern>
  <attr>MyAttr</attr>
</pattern>
@endcode
is the same as 
@code
<attr>MyAttr</attr>
@endcode

        There is an optional attribute called "name" with default value
"main".  This name is used by @ref attachpatternattr "attachPattern"
attribute.

@code
<pattern name="main">
  <attr>MyAttr</attr>
</pattern>
@endcode
is the same as 
@code
<pattern>
  <attr>MyAttr</attr>
</pattern>
@endcode

        In case there are multiple pattern elements in the file they must
have different names assigned.

@section        syntaxtree              Tree elements

@subsection     syntaxnochildren        Elements without children

        Pattern specification containts elements that has no children but can
have text content.

@subsubsection  syntaxattr              Attr element

        @tag{tag,\<attr\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?\, attr?\,
                valuePattern?\, default?\, iterator?}
        @tag{children,NONE}

        The value of the optional attribute @ref attrattr "attr" can be
assigned as the tag content as well.

@code
<attr>MyAttr</attr>
@endcode
is the same as
@code
<attr attr="MyAttr" />
@endcode

        Tag content overwrites attribute value.

@code
<attr attr="MyAttr">YourAttr</attr>
@endcode
is the same as
@code
<attr attr="YourAttr" />
@endcode
or
@code
<attr>YourAttr</attr>
@endcode

        Allowed values of an @ref iteratorattr "iterator" attribute for
\<attr\> element are "yes", "no" or "auto".


@subsection     syntaxchildren          Elements with children

@subsubsection  syntaxall               All element

        @tag{tag,\<all\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?}
        @tag{children,ANY*}

@subsubsection  syntaxone               One element

        @tag{tag,\<one\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?}
        @tag{children,ANY*}

@subsubsection  syntaxopt               Opt element

        @tag{tag,\<opt\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?}
        @tag{children,ANY*}

@subsubsection  syntaxsome              Some element

        @tag{tag,\<some\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?}
        @tag{children,ANY*}

@subsubsection  syntaxkeyattr           KeyAttr element

        @tag{tag,\<key_attr\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?\, attr\,
                valuePattern?\, default?\, iterator?}
        @tag{children,ANY*}

        All followers of KeyAttr follower @b must declare a @ref
forvalueattr "forValue" attribute.

        Allowed values of an @ref iteratorattr "iterator" attribute for
\<key_attr\> element are "yes", "no" or "auto".

@subsubsection  syntaxnodeattr           NodeAttr element

        @tag{tag,\<node_attr\>}
        @tag{attributes,forValue?\, attachPattern?\, assert?\, flag?\, attr\,
                iterator?}
        @tag{children,ANY}

        Allowed values of an @ref iteratorattr "iterator" attribute for
\<node_attr\> element are "yes" or "no" since autodetection is ambiguous.
*/
